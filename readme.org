#+TITLE: servant + beam + nix 
#+OPTIONS: ^:nil
#+OPTIONS: toc:nil

* Disclaimers

I am still learning nix and haskell in general, please take it with a grain of salt on everthing mentioned here.


* Environments
- OS: MacOS 10.14.16
- Nix: 2.3.1
- Editor: Spacemacs - 0.300.0@26.3
- GHC : 8.6.5
- Cabal: 2.4.1.0
- "IDE": haskell-ide-engine 0.13.0.0 x86_64 ghc-8.6.5

GHC, Cabal, and haskell-ide-engine (hie) is managed via nix-shell.

* Why Nix
The last thing I want to do is to drag anyone into build tool war.
If It Ain't Broke, Don't Nix it
https://www.youtube.com/watch?v=G9yiJ7d5LeI
* Nix Basics
** Install nix
#+BEGIN_SRC sh
curl https://nixos.org/nix/install | sh
#+END_SRC

** [[https://nixos.org/nix/manual/#ch-upgrading-nix][Upgrade nix]]

#+BEGIN_SRC sh
nix-channel --update; nix-env -iA nixpkgs
#+END_SRC

** Uninstall nix
#+BEGIN_SRC shell
rm -rf /nix
#+END_SRC



#+BEGIN_SRC shell
nix-prefetch-git https://github.com/NixOS/nixpkgs.git 19.09 > nixpkgs-19-09.json
#+END_SRC

https://github.com/data61/fp-course/blob/master/nix/nixpkgs.nix

to find the current nixos versions
https://github.com/NixOS/nixpkgs-channels/branches


* Setup a haskell+nix project with hie 

** all major Haskell IDE-like efforts I am aware of 
- [[https://github.com/haskell/haskell-ide-engine][haskell-ide-engine(hie)]]
- [[https://github.com/digital-asset/ghcide][ghcide]]
- [[https://github.com/jyp/dante][dante]]  (emacs plugin)
- [[https://github.com/ndmitchell/ghcid][ghcid]] 
- [[https://github.com/leksah/leks][Leksah]] (an IDE for haskell)

Among them, I like hie the most. Currently, hie has something [[https://github.com/haskell/haskell-ide-engine/issues/1376][issues]] work with cabal 3. So if you want to use haskell-ide-engine, you have to use cabal 2.4.1.0 or stack (stack uses cabal 2.4.1.0 internally). 
We could install cabal and hie using ~nix-env~ with commands like:

#+BEGIN_SRC shell
nix-channel --add https://nixos.org/channels/nixos-19.03 nixos-19-03
nix-channel --update
nix-env -iA nixos-19-03.cabal-install
cachix use all-hies
nix-env -iA selection --arg selector 'p: { inherit (p) ghc865; }' -f https://github.com/infinisil/all-hies/tarball/master
#+END_SRC                                                    

But a nicer way to do is to declare these packages in our nix-shell file. 
It is more flexible, won't affect our global cabal version, tool like hie requires GHC which you might not want install globally.
The nix-shell approach also plays well with lorri.

[[https://github.com/Infinisil/all-hies][install hie using nix]]


usually we need three nix files for a haskell project.
- default.nix generated by cabal2nix, which captures our haskell deps
 src_sh[:exports code]{cabal2nix . > default.nix}


*** Editor intergration
    https://github.com/haskell/haskell-ide-engine/#using-hie-with-spacemacs

** Lorri  
   Lorri requires direnv. I installed direnv globally using nix.

   setup https://www.tweag.io/posts/2019-03-28-introducing-lorri.html
https://github.com/target/lorri/tree/master/example
https://github.com/aveltras/arohi-skeleton

git@github.com:aveltras/arohi-skeleton.git
https://direnv.net/docs/hook.html


you can verify cabal version by src_sh[:exports code]{cabal --version}

** Setup local Dev tools
[[https://hoogle.haskell.org/][Hoogle]]

#+BEGIN_SRC nix
{ nixpkgs ? import <nixpkgs> {} , compiler ? "ghc865" }:
let
  inherit (nixpkgs) haskellPackages;
  myPackages = import ./release.nix {inherit nixpkgs compiler; };
in
  haskellPackages.shellFor {
    withHoogle = true;
    packages = p: [myPackages];
    buildInputs =  with nixpkgs.haskellPackages;
     [ hlint stylish-haskell ghcid hoogle];
}
#+END_SRC

workflow 

#+BEGIN_SRC shell
lorri daemon &
emacs . &
ghcid -c 'cabal new-repl beam-servant-tutorial' -T API.main
#+END_SRC

cabal new-repl seems only one package to to load

need to figure the limitation of this approach
https://www.parsonsmatt.org/2018/05/19/ghcid_for_the_win.html
https://binarin.ru/post/auto-reload-threepenny-gui/

we still need beam-servant-tutorial.cabal, b/c

#+BEGIN_SRC sh
unpacking sources
unpacking source archive /nix/store/nf9hhcmb9a0s6qr2y1zd3lj5d36shjyj-beam-servant-tutorial.cabal
do not know how to unpack source archive /nix/store/nf9hhcmb9a0s6qr2y1zd3lj5d36shjyj-beam-servant-tutorial.cabal
#+END_SRC


* Aeson Tutorial
https://artyom.me/aeson

customsing field name
* [[https://haskell-servant.readthedocs.io/en/v0.8/tutorial/index.html][Servant Tutorial]] 

Outter level we need ([[https://hackage.haskell.org/package/warp][warp]] package) 

#+BEGIN_SRC haskell
import Network.Wai.Handler.Warp (run)

main :: IO ()
main = run 8081 app
#+END_SRC

src_haskell[:exports code]{run :: Port -> Application -> IO ()}

[[https://www.stackage.org/haddock/nightly-2019-11-17/warp-3.3.4/Network-Wai-Handler-Warp.html#v:run][run]]

* [[https://tathougies.github.io/beam/tutorials/tutorial1/][Beam Tutorial]]

* TODO checkout [[https://input-output-hk.github.io/haskell.nix/][input-output-hk haskell.nix]]
* References
- https://blog.latukha.com/NixOS-HIE-Emacs/
- https://www.youtube.com/watch?v=idU7GdlfP9Q
- https://github.com/digital-asset/ghcide/issues/137
- https://github.com/Gabriel439/haskell-nix
- https://cah6.github.io/technology/nix-haskell-1/
- https://github.com/cah6/haskell-nix-skeleton-1
- https://nixos.org/nixpkgs/manual/#haskell
